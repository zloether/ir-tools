#!/usr/bin/env python
# virustotal_malware_details.py
# sample malicious hash: db349b97c37d22f5ea1d1841e3c89eb4

# import modules
from sys import argv
import requests, collections
try:
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    bundled = True
except:
    import urllib3
    from urllib3.exceptions import InsecureRequestWarning
    bundled = False

def get_malware_details(input_hash, verify=True):
    #--------------------------------------------------------------------------
    # global variables
    #--------------------------------------------------------------------------
    # https://www.virustotal.com/en/documentation/public-api/#audience
    apiKey = 'insert_virustotal_api_key_here'
    api_url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': apiKey, 'resource': input_hash_value}
    headers = {"Accept-Encoding": "gzip, deflate",}
    if not verify:
        if bundled:
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        else:
            urllib3.disable_warnings(InsecureRequestWarning)

    malware_details = collections.OrderedDict() # initialize return data

    #--------------------------------------------------------------------------
    # make API request
    #--------------------------------------------------------------------------
    response = requests.get(api_url, params=params, headers=headers, verify=verify)
    try:
        json_response = response.json()
    except:
        print(response.status_code)
        print(response.text)
        exit()

    #--------------------------------------------------------------------------
    # parse JSON response and extract relevant data
    #--------------------------------------------------------------------------
    malware_details['md5'] = str(json_response['md5'])
    malware_details['sha1'] = str(json_response['sha1'])
    malware_details['sha256'] = str(json_response['sha256'])
    malware_details['Detect ratio'] = str(json_response['positives']) + "/" + str(json_response['total'])
    malware_details['Permalink'] = str(json_response['permalink'])

    #--------------------------------------------------------------------------
    # make web request using permalink to get other useful details
    #--------------------------------------------------------------------------
    web_response = requests.get(malware_details['Permalink'], verify=verify)
    response_text = web_response.text

    # file names
    beginning, end = response_text.split('<td class="field-key">File names</td>', 1)
    middle, rest = end.split('</td>', 1)
    first, names = middle.split('>', 1)
    file_names = names.split('<br/>')
    file_names_clean = [] # initialize list
    for name in file_names:
        file_names_clean.append(name.strip())

    malware_details['File names'] = file_names_clean

    # file size
    beginning, end = response_text.split('<span class="field-key">File size</span>', 1)
    file_size, rest = end.split('</div>', 1)
    malware_details['File size'] = file_size.strip()

    # file type
    beginning, end = response_text.split('<span class="field-key">File type</span>', 1)
    file_type, rest = end.split('</div>', 1)
    malware_details['File type'] = file_type.strip()

    # original name
    beginning, end = response_text.split('<span class="field-key">Original name</span>', 1)
    original_name, rest = end.split('</div>', 1)
    malware_details['Original name'] = original_name.strip()

    # product
    beginning, end = response_text.split('<span class="field-key">Product</span>', 1)
    product, rest = end.split('</div>', 1)
    malware_details['Product'] = product.strip()

    # file version
    beginning, end = response_text.split('<span class="field-key">File version</span>', 1)
    file_version, rest = end.split('</div>', 1)
    malware_details['File version'] = file_version.strip()

    # description
    beginning, end = response_text.split('<span class="field-key">Description</span>', 1)
    description, rest = end.split('</div>', 1)
    malware_details['Description'] = description.strip()

    # target machine
    beginning, end = response_text.split('<span class="field-key">Target machine</span>', 1)
    target_machine, rest = end.split('</div>', 1)
    malware_details['Target machine'] = target_machine.strip()

    # analysis date
    beginning, end = response_text.split('<td>Analysis date:</td>', 1)
    header, rest = end.split('<td >', 1)
    analysis_date, rest = rest.split('</td>', 1)
    actual_date, relative_date = analysis_date.split('UTC', 1)
    malware_details['Analysis date'] = actual_date.strip() + " UTC " + relative_date.strip()


    # return parsed malware details
    return malware_details

if __name__ == "__main__":
    #--------------------------------------------------------------------------
    # get argument
    #--------------------------------------------------------------------------
    try:
        script, input_hash_value = argv
    except:
        print("Usage: Run this script with a hash value as an argument. This " +\
                "will lookup other hashes for the same malware from other sources.")
        exit()

    malware_details = get_malware_details(input_hash_value, verify=True)

    for key in malware_details:
        if type(malware_details[key]) == list:
            print(str(key) + ":")
            for item in malware_details[key]:
                print("\t" + str(item))
        else:
            print(str(key) + ":\t" + str(malware_details[key]))

    exit()
