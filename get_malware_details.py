#!/usr/bin/env python
# get_malware_details.py
# sample malicious hash: db349b97c37d22f5ea1d1841e3c89eb4

# import modules
from sys import argv
import requests

def get_malware_details(input_hash):
    #--------------------------------------------------------------------------
    # global variables
    #--------------------------------------------------------------------------
    # https://www.virustotal.com/en/documentation/public-api/#audience
    apiKey = 'insert_virustotal_api_key_here'
    malware_details = {}

    #--------------------------------------------------------------------------
    # make API request
    #--------------------------------------------------------------------------
    api_url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': apiKey, 'resource': input_hash_value}
    headers = {"Accept-Encoding": "gzip, deflate",}
    response = requests.get(api_url, params=params, headers=headers)
    json_response = response.json()

    #--------------------------------------------------------------------------
    # parse JSON response and extract relevant data
    #--------------------------------------------------------------------------
    malware_details['md5'] = str(json_response['md5'])
    malware_details['sha1'] = str(json_response['sha1'])
    malware_details['sha256'] = str(json_response['sha256'])
    malware_details['detection_ratio'] = str(json_response['positives']) + "/" + str(json_response['total'])
    malware_details['permalink'] = str(json_response['permalink'])

    #--------------------------------------------------------------------------
    # make web request using permalink to get other useful details
    #--------------------------------------------------------------------------
    web_response = requests.get(malware_details['permalink'])
    response_text = web_response.text

    # file names
    beginning, end = response_text.split('<td class="field-key">File names</td>', 1)
    middle, rest = end.split('</td>', 1)
    first, names = middle.split('>', 1)
    file_names = names.split('<br/>')
    file_names_clean = [] # initialize list
    for name in file_names:
        file_names_clean.append(name.strip())

    malware_details['file_names'] = file_names_clean

    # file size
    beginning, end = response_text.split('<span class="field-key">File size</span>', 1)
    file_size, rest = end.split('</div>', 1)
    malware_details['file_size'] = file_size.strip()

    # file type
    beginning, end = response_text.split('<span class="field-key">File type</span>', 1)
    file_type, rest = end.split('</div>', 1)
    malware_details['file_type'] = file_type.strip()

    # original name
    beginning, end = response_text.split('<span class="field-key">Original name</span>', 1)
    original_name, rest = end.split('</div>', 1)
    malware_details['original_name'] = original_name.strip()

    # product
    beginning, end = response_text.split('<span class="field-key">Product</span>', 1)
    product, rest = end.split('</div>', 1)
    malware_details['product'] = product.strip()

    # file version
    beginning, end = response_text.split('<span class="field-key">File version</span>', 1)
    file_version, rest = end.split('</div>', 1)
    malware_details['file_version'] = file_version.strip()

    # description
    beginning, end = response_text.split('<span class="field-key">Description</span>', 1)
    description, rest = end.split('</div>', 1)
    malware_details['description'] = description.strip()

    # target machine
    beginning, end = response_text.split('<span class="field-key">Target machine</span>', 1)
    target_machine, rest = end.split('</div>', 1)
    malware_details['target_machine'] = target_machine.strip()

    # analysis date
    beginning, end = response_text.split('<td>Analysis date:</td>', 1)
    header, rest = end.split('<td >', 1)
    analysis_date, rest = rest.split('</td>', 1)
    actual_date, relative_date = analysis_date.split('UTC', 1)
    malware_details['analysis_date'] = actual_date.strip() + " UTC " + relative_date.strip()


    # return parsed malware details
    return malware_details

if __name__ == "__main__":
    #--------------------------------------------------------------------------
    # get argument
    #--------------------------------------------------------------------------
    try:
        script, input_hash_value = argv
    except:
        print("Usage: Run this script with a hash value as an argument. This " +\
                "will lookup other hashes for the same malware from other sources.")
        exit()

    malware_details = get_malware_details(input_hash_value)

    print("Product:\t" + str(malware_details['product']))
    print("Original name:\t" + str(malware_details['original_name']))
    print("File version:\t" + str(malware_details['file_version']))
    print("Description:\t" + str(malware_details['description']))
    print("File size:\t" + str(malware_details['file_size']))
    print("File type:\t" + str(malware_details['file_type']))
    print("Taret machine:\t" + str(malware_details['target_machine']))
    print("Detect ratio:\t" + str(malware_details['detection_ratio']))
    print("Analysis date:\t" + str(malware_details['analysis_date']))
    print("md5:\t\t" + str(malware_details['md5']))
    print("sha1:\t\t" + str(malware_details['sha1']))
    print("sha256:\t\t" + str(malware_details['sha256']))
    print("File names:")
    for i in malware_details['file_names']:
        if i: # don't print blank line at the end
            print("\t" + str(i))
    print("permalink:\n" + str(malware_details['permalink']))
